# utilities for building a library with stripped symbols
function(find_static OUTPUT LIBLIBNAME)
  set(_c_orig_find_lib_suffixes ${CMAKE_FIND_LIBRARY_SUFFIXES})
  if (WIN32)
  list(INSERT CMAKE_FIND_LIBRARY_SUFFIXES 0 .lib .a)
  else() 
  set(CMAKE_FIND_LIBRARY_SUFFIXES .a)
  endif()
  find_library(${OUTPUT} ${LIBLIBNAME} PARENT_SCOPE)
  set(CMAKE_FIND_LIBRARY_SUFFIXES _c_orig_find_lib_suffixes)
endfunction()
function add_stdlib(LIBNAME)
  set(options)
  set(ova BUILD_SHARED PREFIX)
  set(mva TARGETS LIBS)
  cmake_parse_arguments(PARSE_ARGV 1 "${options}" "${ova}" "${mva}")
  if (NOT DEFINED BUILD_SHARED)
    set(BUILD_SHARED ${BUILD_SHARED_LIBS})
  endif()
  if (NOT DEFINED PREFIX)
    set(PREFIX __)
  endif()
  if (${BUILD_SHARED})
    add_library(${LIBNAME} SHARED ${TARGETS})
    target_compile_options(${LIBNAME} -nostdlib)
    foreach(ADDED_LIB ${LIBS})
      target_link_libraries(${LIBNAME} ${ADDED_LIB})
    endforeach()
    add_custom_command(TARGET ${LIBNAME} POST_BUILD COMMAND strip -wK ${PREFIX}* libco-std.so)
  else()
    add_library(${LIBNAME} STATIC ${TARGETS})
    add_custom_command(TARGET ${LIBNAME} POST_BUILD COMMAND rm -rf ${CMAKE_BINARY_DIR}/${LIBNAME}_files)
    add_custom_command(TARGET ${LIBNAME} POST_BUILD COMMAND mkdir ${CMAKE_BINARY_DIR}/${LIBNAME}_files)
    foreach(ADDED_LIB ${LIBS})
      find_static(LIB c)
      add_custom_command(TARGET ${LIBNAME} POST_BUILD COMMAND ar x ${LIB} --output=${CMAKE_BINARY_DIR}/${LIBNAME}_files)
    endforeach()
    add_custom_command(TARGET ${LIBNAME} POST_BUILD COMMAND ar rcs $<TARGET_FILE:${LIBNAME}> `ls ${CMAKE_BINARY_DIR}/libco_files` $<TARGET_OBJECTS:co-std> WORKING_DIRECTORY ${CMAKE_BINARY_DIR}/${LIBNAME}_files)
    add_custom_command(TARGET ${LIBNAME} POST_BUILD COMMAND strip -wK ${PREFIX}* $<TARGET_FILE:${LIBNAME}>)
  endif()
endfunction()